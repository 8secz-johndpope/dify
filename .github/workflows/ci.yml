name: CI

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'master'
  pull_request:

jobs:
  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
      - name: Setup Rust Action
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
      - name: Setup Rust Action
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  lints:
    name: Lints
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
      - name: Setup Rust Action
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  distribution:
    name: Distribution
    needs: [check, test, lints]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, macOS-latest, windows-latest]
        include:
          - os: ubuntu-16.04
            name: dify-Linux-x86_64.tar.gz
          - os: macOS-latest
            name: dify-Darwin-x86_64.tar.gz
          - os: windows-latest
            name: dify-Windows-x86_64.zip
    steps:
      - name: Setup | Checkout code
        uses: actions/checkout@v2

      - name: Setup | Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build | Build
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Package
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          strip target/release/dify
          cd target/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            7z a ../../${{ matrix.name }} dify
          else
            tar czvf ../../${{ matrix.name }} dify
          fi
          cd -

      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          files: 'dify*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
